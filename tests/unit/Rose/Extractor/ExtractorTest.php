<?php declare(strict_types=1);
/**
 * @copyright 2023 Roman Parpalak
 * @license   MIT
 */

namespace S2\Rose\Test\Extractor;

use Codeception\Test\Unit;
use S2\Rose\Extractor\ExtractorInterface;
use S2\Rose\Extractor\HtmlDom\DomExtractor;
use S2\Rose\Extractor\HtmlRegex\RegexExtractor;
use S2\Rose\Helper\StringHelper;

/**
 * @group extract
 */
class ExtractorTest extends Unit
{
    private DomExtractor $domExtractor;
    private RegexExtractor $regexExtractor;

    /**
     * {@inheritdoc}
     */
    public function _before()
    {
        $this->domExtractor   = new DomExtractor();
        $this->regexExtractor = new RegexExtractor();
    }

    /**
     * @dataProvider htmlTextProvider
     */
    public function testRegexExtractor(string $htmlText, string $resultText): void
    {
        $extractionResult = $this->regexExtractor->extract($htmlText);
        $sentenceMap      = $extractionResult->getContentWithMetadata()->getSentenceMap();

        self::assertEquals(StringHelper::clearInternalFormatting($resultText), $sentenceMap->toSentenceCollection()->getText());
    }

    /**
     * @dataProvider htmlTextProvider
     */
    public function testDomExtractor(string $htmlText, string $resultText, ?array $words = null, $images = null): void
    {
        $extractionResult = $this->domExtractor->extract($htmlText);

        $sentenceMap = $extractionResult->getContentWithMetadata()->getSentenceMap();
        self::assertEquals($resultText, $sentenceMap->toSentenceCollection()->getText());
        if ($words !== null) {
            self::assertEquals($words, $sentenceMap->toSentenceCollection()->getWordsArray());
        }
        if ($images !== null) {
            self::assertEquals($images, $extractionResult->getContentWithMetadata()->getImageCollection()->toJson());
        }
    }

    public function testDomExtractionError(): void
    {
        $extractor = new DomExtractor();

        $extractionResult = $extractor->extract('<p>html text</p>');
        self::assertFalse($extractionResult->getErrors()->hasErrors());

        $extractionResult = $extractor->extract('Plain text');
        self::assertTrue($extractionResult->getErrors()->hasErrors());
        self::assertEquals(['1:? Found anonymous text block "Plain text". Consider using <p> tag as a text container. (code=anon_text)'], $extractionResult->getErrors()->getFormattedLines());

        $extractionResult = $extractor->extract('<b>unbalanced html</i>');
        self::assertTrue($extractionResult->getErrors()->hasErrors());
        self::assertEquals([
            '1:152 Unexpected end tag : i (code=76)',
            '1:159 Opening and ending tag mismatch: body and b (code=76)',
        ], $extractionResult->getErrors()->getFormattedLines());
    }

    /**
     * @dataProvider htmlSentenceProvider
     */
    public function testSentenceBreaking(ExtractorInterface $extractor, string $htmlText, array $sentences): void
    {
        $extractionResult = $extractor->extract($htmlText);
        $sentenceMap      = $extractionResult->getContentWithMetadata()->getSentenceMap();

        self::assertEquals($sentences, $sentenceMap->toSentenceCollection()->toArray());
    }

    public function htmlTextProvider(): array
    {
        return [
            ['Some <nobr>self-test</nobr>.', 'Some self-test.'],
            ['Some <noindex>self-test</noindex>.', 'Some self-test.'],
            ['Some text.<BR>Another text.<hr />Any other text.', 'Some text. Another text. Any other text.'],
            ['<P>One sentence.</P><p class="not-important">Another<br>sentence.</p>', 'One sentence. Another sentence.'],
            ['<P>One sentence.</P><!--excluded--><p>Another<br>sentence.</p>', 'One sentence. Another sentence.'],
            ['<P>One sentence.</P><noindex><p>Another<br>sentence.</p></noindex>', 'One sentence. Another sentence.'],
            ['<P>One sentence.</P><p>Another<img src="1.png" alt="" />sentence.</p>', 'One sentence. Another sentence.'],
            ['<p>One sentence.</p>List:<ul><li>First</li>  <li> Second<p>and a half  </p></li></ul>', 'One sentence. List: First Second and a half'],
            ['<P><i>This</i> sentence is a little bit <em>longer. And</em> this is not.</p>', '\\iThis\\I sentence is a little bit \\ilonger.\\I \\iAnd\\I this is not.'],
            ['<p>This <table><tr><td>is broken</td><td>HTML.</td></tr></table>I <b>want <i>to</b> test a</i> real-word <img><unknown-tag>example</p>', 'This is broken HTML. I \bwant \ito\I\B test a real-word example', ['this', 'is', 'broken', 'html', 'i', 'want', 'to', 'test', 'a', 'real-word', 'example']],
            [
                '<P><i>This</i> sentence&nbsp;contains entities like &#43;, &plus;, &planck;, &amp;, &lt;, &quot;, &#8212;, &laquo;, &#x2603;, &#x1D306;, &#xA9;, &copy;. &amp;plus; is not an entity.</p>',
                '\\iThis\\I sentence¬†contains entities like +, +, ‚Ñè, &, <, ", ‚Äî, ¬´, ‚òÉ, ùåÜ, ¬©, ¬©. &plus; is not an entity.',
                ['this', 'sentence', 'contains', 'entities', 'like', '‚Ñè', 'plus', 'is', 'not', 'an', 'entity'],
            ],
            [
                '<style>
div {
    background: 50% url(/pictures/img_1106.jpg) no-repeat #ccc;
    background-size: cover;
    padding-top: 56.25%;
}
/*<p>Not to be indexed</p>*/
@media screen and (min-aspect-ratio: 32 / 19) {
    div {
        padding-top: 50%;
    }
}
#header-crumbs.image-crumbs {
    z-index: 1;
}
</style>

<div class="index-skip">
<p>–ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è.</p>
</div>

<noindex>

<p>–î–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è.</p>

</noindex>

<p><img src="1.jpg" width="300" height="200">–í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–Ω–µ–±—Ä–µ—á—å.</p>

<p><img src="https://localhost/2.jpg&amp;test=1" width="300" height="200" alt="valid escaped src and alt &amp; &rarr; &amp;rarr;">

<blockquote>
    –ê —ç—Ç–æ —Ü–∏—Ç–∞—Ç–∞, –µ–µ —Ç–æ–∂–µ –Ω–∞–¥–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å.
    <p>–í —Ü–∏—Ç–∞—Ç–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–±–∑–∞—Ü—ã.</p>
</blockquote>

<img src="https://localhost/3.jpg&test=1" width="300" height="200" alt="invalid escaped src and alt &">

<p>–û—à–∏–±–∫–∞ <i>–∞—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏</i> –¥–∞—ë—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É.</p>

<p>–ï—â–µ 1 —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ gt —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤ &lt;script&gt;alert();&lt;/script&gt; xss-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.</p>',
                '–î–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è. –í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–Ω–µ–±—Ä–µ—á—å. –ê —ç—Ç–æ —Ü–∏—Ç–∞—Ç–∞, –µ–µ —Ç–æ–∂–µ –Ω–∞–¥–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å. –í —Ü–∏—Ç–∞—Ç–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–±–∑–∞—Ü—ã. –û—à–∏–±–∫–∞ \\i–∞—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏\\I –¥–∞—ë—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É. –ï—â–µ 1 —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ gt —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤ <script>alert();</script> xss-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.',
                null,
                '[{"src":"1.jpg","width":"300","height":"200","alt":""},{"src":"https:\/\/localhost\/2.jpg&test=1","width":"300","height":"200","alt":"valid escaped src and alt & ‚Üí &rarr;"},{"src":"https:\/\/localhost\/3.jpg&test=1","width":"300","height":"200","alt":"invalid escaped src and alt &"}]'
            ],
        ];
    }

    public function htmlSentenceProvider(): array
    {
        $source = '<p><span class="index-skip">00:11</span> –ü–æ—á–µ–º—É –º–æ–∏–º —Å–ª–æ–≤–∞–º —Å—Ç–æ–∏—Ç –¥–æ–≤–µ—Ä—è—Ç—å: 13 –ª–µ—Ç –æ–ø—ã—Ç–∞<br />
<span class="index-skip">00:42</span> –°–æ–±–∏—Ä–∞–ª—Å—è —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–æ–Ω—è—Ç–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–≤–Ω–æ<br />
<span class="index-skip">01:11</span> –î–ª—è –∑–∞—Ç—Ä–∞–≤–∫–∏: —á–µ–º –ø–ª–æ—Ö–∏ –≤—ã–ø–∞–¥–∞–π–∫–∏ –≤ –≤–µ–±–µ, –ø—Ä–∏–º–µ—Ä –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–∞<br />
<span class="index-skip">03:28</span> –ü–æ–Ω—è—Ç–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞<br />
<span class="index-skip">04:56</span> –ü—Ä–∏–º–µ—Ä 1: —Ñ–æ—Ä–º–∞—Ç –≤–µ–±–∞ –∏ —Ñ–æ—Ä–º–∞—Ç –æ–∫–æ–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑ <a href="https://habr.com/ru/post/143386/">—Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ö–∞–±—Ä–µ</a>)<br />
<span class="index-skip">08:03</span> <a href="https://habr.com/ru/post/143386/#comment_4805232">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—Ç–∞—Ç—å–µ</a>, –æ–±—Ä–∞—â–∞—é—â–∏–π—Å—è –∫ –ø–æ–Ω—è—Ç–∏—é —Ñ–æ—Ä–º–∞—Ç–∞<br />
<span class="index-skip">10:42</span> OS/2 —É–º–µ—Ä<br />
<span class="index-skip">12:09</span> –û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ—á–µ–º—É —Ç–∞–∫–æ–µ? –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1: —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–æ–≤<br />
<span class="index-skip">14:24</span> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 2: —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ–ø–∞–º—è—Ç–∏<br />
<span class="index-skip">15:26</span> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 3: —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è<br />
<span class="index-skip">18:53</span> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4: —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –¥—Ä–∞–π–≤–µ—Ä–æ–≤<br />
<span class="index-skip">19:54</span> 640*480 - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ 90-—Ö<br />
<span class="index-skip">20:58</span> –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ–±–∞<br />
<span class="index-skip">22:47</span> –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–∞–¥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å<br />
<span class="index-skip">25:28</span> –ë–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏–π –∫ –≤–µ–±—É<br />
<span class="index-skip">26:52</span> –≠–≤–æ–ª—é—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows<br />
<span class="index-skip">32:28</span> –ü—Ä–∏–º–µ—Ä 2: –û–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è<br />
<span class="index-skip">33:54</span> –ê–¥–º–∏–Ω–∫–∞ –º–æ–µ–≥–æ –¥–≤–∏–∂–∫–∞ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è<br />
<span class="index-skip">37:25</span> –ö–∞–∫ –±—ã —Å–µ–π—á–∞—Å —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∫–∏<br />
<span class="index-skip">41:42</span> –û–±—Å—É–∂–¥–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –¥–∏–∑–∞–π–Ω –≤—ã–ø–∞–¥–∞–π–∫–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–∞<br />
<span class="index-skip">46:17</span> –ò—Ç–æ–≥</p>';

        $sentences = [
            '–ü–æ—á–µ–º—É –º–æ–∏–º —Å–ª–æ–≤–∞–º —Å—Ç–æ–∏—Ç –¥–æ–≤–µ—Ä—è—Ç—å: 13 –ª–µ—Ç –æ–ø—ã—Ç–∞',
            '–°–æ–±–∏—Ä–∞–ª—Å—è —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–æ–Ω—è—Ç–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–≤–Ω–æ',
            '–î–ª—è –∑–∞—Ç—Ä–∞–≤–∫–∏: —á–µ–º –ø–ª–æ—Ö–∏ –≤—ã–ø–∞–¥–∞–π–∫–∏ –≤ –≤–µ–±–µ, –ø—Ä–∏–º–µ—Ä –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–∞',
            '–ü–æ–Ω—è—Ç–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞',
            '–ü—Ä–∏–º–µ—Ä 1: —Ñ–æ—Ä–º–∞—Ç –≤–µ–±–∞ –∏ —Ñ–æ—Ä–º–∞—Ç –æ–∫–æ–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ö–∞–±—Ä–µ)',
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å—Ç–∞—Ç—å–µ, –æ–±—Ä–∞—â–∞—é—â–∏–π—Å—è –∫ –ø–æ–Ω—è—Ç–∏—é —Ñ–æ—Ä–º–∞—Ç–∞',
            'OS/2 —É–º–µ—Ä',
            '–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ—á–µ–º—É —Ç–∞–∫–æ–µ? –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1: —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–æ–≤',
            '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 2: —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ–ø–∞–º—è—Ç–∏',
            '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 3: —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
            '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4: —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –¥—Ä–∞–π–≤–µ—Ä–æ–≤',
            '640*480 - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ 90-—Ö',
            '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ–±–∞',
            '–°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–∞–¥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
            '–ë–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏–π –∫ –≤–µ–±—É',
            '–≠–≤–æ–ª—é—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows',
            '–ü—Ä–∏–º–µ—Ä 2: –û–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            '–ê–¥–º–∏–Ω–∫–∞ –º–æ–µ–≥–æ –¥–≤–∏–∂–∫–∞ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            '–ö–∞–∫ –±—ã —Å–µ–π—á–∞—Å —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∫–∏',
            '–û–±—Å—É–∂–¥–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –¥–∏–∑–∞–π–Ω –≤—ã–ø–∞–¥–∞–π–∫–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–∞',
            '–ò—Ç–æ–≥',
        ];

        $sourceWithCode = '<p>–û—à–∏–±–∫–∞ <i>–∞—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏</i> –¥–∞—ë—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É.</p>

<pre><code>&lt;?php

require \'vendor/autoload.php\';

use GuzzleHttp\Client;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\ServerRequest;

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ Guzzle
$client = new Client();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
$request = ServerRequest::fromGlobals();

// –ü–æ–ª—É—á–µ–Ω–∏–µ URL-–∞–¥—Ä–µ—Å–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ —Å–∞–π—Ç–∞
$url = $request->getUri();
$url
    // –Ø —Å–æ–±–∏—Ä–∞–ª—Å—è —Ö–æ–¥–∏—Ç—å –Ω–∞ https-—Å–∞–π—Ç—ã, –ø–æ—ç—Ç–æ–º—É –ø–æ–¥–º–µ–Ω–∏–ª –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –ø–æ—Ä—Ç
    ->withScheme(\'https\')
    ->withPort(443)
    // –ü–æ–¥–º–µ–Ω—è–µ–º —Ö–æ—Å—Ç (–≤–∏–¥–∏–º–æ, —Ç—É—Ç –∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ http-–ø—Ä–æ–∫—Å–∏)
    ->withHost($request->getHeaderLine(\'host\'))
    ->withQuery($request->getUri()->getQuery())
;
</code></pre>

<pre>123</pre>

<p><strong>–ü–æ–ª–Ω–æ—Å—Ç—å—é –∂–∏—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.</strong></p>

<p><strong></strong></p>

<p><strong>–ü–æ–ª–Ω–æ—Å—Ç—å—é –∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.</strong></p>

<p>–î–≤–∞ <i>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ò –æ–±–∞</i> —Å –∫—É—Ä—Å–∏–≤–æ–º.</p>

<p>–ï—â–µ 1 —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ gt —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤ &lt;script&gt;alert();&lt;/script&gt; xss-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.</p>';

        $sourceWithCodeSentences = [
            '–û—à–∏–±–∫–∞ \\i–∞—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏\\I –¥–∞—ë—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É.',
            '<?php',
            'require \'vendor/autoload.php\';',
            'use GuzzleHttp\\\\Client;',
            'use GuzzleHttp\\\\Psr7\\\\Request;',
            'use GuzzleHttp\\\\Psr7\\\\ServerRequest;',
            '// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ Guzzle',
            '$client = new Client();',
            '// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
            '$request = ServerRequest::fromGlobals();',
            '// –ü–æ–ª—É—á–µ–Ω–∏–µ URL-–∞–¥—Ä–µ—Å–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ —Å–∞–π—Ç–∞',
            '$url = $request->getUri();',
            '$url',
            '// –Ø —Å–æ–±–∏—Ä–∞–ª—Å—è —Ö–æ–¥–∏—Ç—å –Ω–∞ https-—Å–∞–π—Ç—ã, –ø–æ—ç—Ç–æ–º—É –ø–æ–¥–º–µ–Ω–∏–ª –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –ø–æ—Ä—Ç',
            '->withScheme(\'https\')',
            '->withPort(443)',
            '// –ü–æ–¥–º–µ–Ω—è–µ–º —Ö–æ—Å—Ç (–≤–∏–¥–∏–º–æ, —Ç—É—Ç –∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ http-–ø—Ä–æ–∫—Å–∏)',
            '->withHost($request->getHeaderLine(\'host\'))',
            '->withQuery($request->getUri()->getQuery())',
            ';',
            '123',
            '\\b–ü–æ–ª–Ω–æ—Å—Ç—å—é –∂–∏—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\\B',
            '\\b\\B',
            '\\b–ü–æ–ª–Ω–æ—Å—Ç—å—é –∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\\B',
            '–î–≤–∞ \i–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\I',
            '\i–ò –æ–±–∞\I —Å –∫—É—Ä—Å–∏–≤–æ–º.',
            '–ï—â–µ 1 —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ gt —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—â–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤ <script>alert();</script> xss-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.',

        ];

        return [
            [new DomExtractor(), $source, $sentences],
            [new RegexExtractor(), $source, $sentences],
            [new DomExtractor(), $sourceWithCode, $sourceWithCodeSentences],
        ];
    }
}
